data Int {
	int i
}

component provides server.Server requires io.Output out, data.adt.List:heap list,
	http.HTTPUtil httpUtil, data.IntUtil iu, data.DecUtil du, util.Math math {

	void Server:process(HTTPMessage msg) {
		if (msg.command == "GET") {
			sendResponse(msg, "Hello from Dana server!")
		} else if (msg.command == "POST") {
			int num = iu.intFromString(msg.postData)

			if (isPrime(num)) {
				sendResponse(msg, "PRIME")
			} else {
				sendResponse(msg, "NOT PRIME")
			}
		}
	}

	bool isPrime(int num) {
		if (num <= 3) {
			return num > 1
		}

		int root = math.ceil(math.sqrt(num))
		for (int i = 2; i < num; i++) {
			if (num % i == 0) {
				return false
			}
		}

		return true
	}

	void sendResponse(HTTPMessage httpMessage, char response[]) {
		httpMessage.socket.send("HTTP/1.1 200 OK\r\n")
		httpMessage.socket.send("Server: $(HTTPUtil.SERVER_NAME)\r\n")
		httpMessage.socket.send("Content-Encoding: binary\r\n")
		httpMessage.socket.send("Content-Length: $(iu.intToString(response.arrayLength))\r\n")
		httpMessage.socket.send("Connection: close\r\n")
		httpMessage.socket.send("Content-Type: $(httpMessage.mimeType)\r\n")
		httpMessage.socket.send("\r\n")
		httpMessage.socket.send(response)
	}
}
